services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_api
    # Use environment variables from .env file if it exists
    env_file:
      - .env
    environment:
      # Default/fallback values if not set in .env
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres/fastapi_skeleton
      - SECRET_KEY=compose_secret_key
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fastapi_skeleton
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      # Mount current directory for development hot-reloading
      # Comment out or remove for production builds
      - .:/app 
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres healthcheck
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  postgres:
    image: postgres:14
    container_name: fastapi_postgres
    # Use environment variables from .env file if it exists
    env_file:
      - .env 
    environment:
      # Default/fallback values if not set in .env
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-fastapi_skeleton}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Optional: Mount init scripts
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: 